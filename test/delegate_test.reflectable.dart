// This file has been generated by the reflectable package.
// https://github.com/dart-lang/reflectable.

import "dart:core";
import 'delegate_test.dart' as prefix0;

// ignore:unused_import
import "package:reflectable/mirrors.dart" as m;
// ignore:unused_import
import "package:reflectable/src/reflectable_transformer_based.dart" as r;
// ignore:unused_import
import "package:reflectable/reflectable.dart" show isTransformed;

final _data = {
  const prefix0.Reflector(): new r.ReflectorData(
      <m.TypeMirror>[
        new r.NonGenericClassMirrorImpl(
            r"A",
            r"test_reflectable.test.delegate_test.A",
            7,
            0,
            const prefix0.Reflector(),
            const <int>[-1],
            null,
            null,
            -1,
            {},
            {},
            {},
            -1,
            -1,
            const <int>[-1],
            null,
            {
              r"==": 1,
              r"toString": 0,
              r"noSuchMethod": 1,
              r"hashCode": 0,
              r"runtimeType": 0,
              r"arg0": 0,
              r"arg1": 1,
              r"arg2to4": 2,
              r"argNamed": 3,
              r"+": 1,
              r"[]": 1,
              r"[]=": 3,
              r"indexTarget": 0,
              r"indexTarget=": 1,
              r"getsetTarget": 0,
              r"getsetTarget=": 1,
              r"getset": 0,
              r"getset=": 1
            })
      ],
      null,
      null,
      <Type>[prefix0.A],
      1,
      {
        r"==": (dynamic instance) => (x) => instance == x,
        r"toString": (dynamic instance) => instance.toString,
        r"noSuchMethod": (dynamic instance) => instance.noSuchMethod,
        r"hashCode": (dynamic instance) => instance.hashCode,
        r"runtimeType": (dynamic instance) => instance.runtimeType,
        r"arg0": (dynamic instance) => instance.arg0,
        r"arg1": (dynamic instance) => instance.arg1,
        r"arg2to4": (dynamic instance) => instance.arg2to4,
        r"argNamed": (dynamic instance) => instance.argNamed,
        r"+": (dynamic instance) => (x) => instance + x,
        r"[]": (dynamic instance) => (x) => instance[x],
        r"[]=": (dynamic instance) => (x, v) => instance[x] = v,
        r"indexTarget": (dynamic instance) => instance.indexTarget,
        r"getsetTarget": (dynamic instance) => instance.getsetTarget,
        r"getset": (dynamic instance) => instance.getset
      },
      {
        r"indexTarget=": (dynamic instance, value) =>
            instance.indexTarget = value,
        r"getsetTarget=": (dynamic instance, value) =>
            instance.getsetTarget = value,
        r"getset=": (dynamic instance, value) => instance.getset = value
      },
      null,
      [
        const [0, 0, null],
        const [1, 0, null],
        const [4, 2, null],
        const [
          2,
          0,
          const [#z]
        ]
      ]),
  const prefix0.NameReflector(): new r.ReflectorData(
      <m.TypeMirror>[
        new r.NonGenericClassMirrorImpl(
            r"A",
            r"test_reflectable.test.delegate_test.A",
            7,
            0,
            const prefix0.NameReflector(),
            const <int>[-1],
            null,
            null,
            -1,
            {},
            {},
            {},
            -1,
            -1,
            const <int>[-1],
            null,
            {r"arg0": 0})
      ],
      null,
      null,
      <Type>[prefix0.A],
      1,
      {r"arg0": (dynamic instance) => instance.arg0},
      {},
      null,
      [
        const [0, 0, null]
      ]),
  const prefix0.MetaReflector(): new r.ReflectorData(
      <m.TypeMirror>[
        new r.NonGenericClassMirrorImpl(
            r"A",
            r"test_reflectable.test.delegate_test.A",
            7,
            0,
            const prefix0.MetaReflector(),
            const <int>[-1],
            null,
            null,
            -1,
            {},
            {},
            {},
            -1,
            -1,
            const <int>[-1],
            null,
            {r"arg1": 0, r"argNamed": 1, r"[]": 0, r"getset": 2})
      ],
      null,
      null,
      <Type>[prefix0.A],
      1,
      {
        r"arg1": (dynamic instance) => instance.arg1,
        r"argNamed": (dynamic instance) => instance.argNamed,
        r"[]": (dynamic instance) => (x) => instance[x],
        r"getset": (dynamic instance) => instance.getset
      },
      {},
      null,
      [
        const [1, 0, null],
        const [
          2,
          0,
          const [#z]
        ],
        const [0, 0, null]
      ])
};

final _memberSymbolMap = {
  const Symbol(r"arg0"): r"arg0",
  const Symbol(r"arg1"): r"arg1",
  const Symbol(r"arg2to4"): r"arg2to4",
  const Symbol(r"argNamed"): r"argNamed",
  const Symbol(r"+"): r"+",
  const Symbol(r"[]"): r"[]",
  const Symbol(r"[]="): r"[]=",
  const Symbol(r"indexTarget"): r"indexTarget",
  const Symbol(r"indexTarget="): r"indexTarget=",
  const Symbol(r"getsetTarget"): r"getsetTarget",
  const Symbol(r"getsetTarget="): r"getsetTarget=",
  const Symbol(r"getset"): r"getset",
  const Symbol(r"getset="): r"getset=",
  const Symbol(r"=="): r"==",
  const Symbol(r"toString"): r"toString",
  const Symbol(r"noSuchMethod"): r"noSuchMethod",
  const Symbol(r"hashCode"): r"hashCode",
  const Symbol(r"runtimeType"): r"runtimeType"
};

initializeReflectable() {
  if (!isTransformed) {
    throw new UnsupportedError(
        "The transformed code is running with the untransformed "
        "reflectable package. Remember to set your package-root to "
        "'build/.../packages'.");
  }
  r.data = _data;
  r.memberSymbolMap = _memberSymbolMap;
}
