// This file has been generated by the reflectable package.
// https://github.com/dart-lang/reflectable.

import "dart:core";
import 'class_property_test.dart' as prefix0;

// ignore:unused_import
import "package:reflectable/mirrors.dart" as m;
// ignore:unused_import
import "package:reflectable/src/reflectable_transformer_based.dart" as r;
// ignore:unused_import
import "package:reflectable/reflectable.dart" show isTransformed;

final _data = {
  const prefix0.Reflector(): new r.ReflectorData(
      <m.TypeMirror>[
        new r.NonGenericClassMirrorImpl(
            r"A",
            r"test_reflectable.test.class_property_test.A",
            519,
            0,
            const prefix0.Reflector(),
            const <int>[],
            const <int>[],
            const <int>[],
            -1,
            {},
            {},
            {},
            0,
            0,
            const <int>[],
            null,
            null),
        new r.NonGenericClassMirrorImpl(
            r"_B",
            r"test_reflectable.test.class_property_test._B",
            39,
            1,
            const prefix0.Reflector(),
            const <int>[],
            const <int>[],
            const <int>[],
            -1,
            {},
            {},
            {},
            0,
            1,
            const <int>[],
            null,
            null),
        new r.GenericClassMirrorImpl(
            r"D",
            r"test_reflectable.test.class_property_test.D",
            7,
            2,
            const prefix0.Reflector(),
            const <int>[],
            const <int>[],
            const <int>[],
            -1,
            {},
            {},
            {},
            0,
            2,
            const <int>[],
            null,
            null, (o) {
          return o is prefix0.D;
        }, const <int>[4], 2),
        new r.NonGenericClassMirrorImpl(
            r"C",
            r"test_reflectable.test.class_property_test.C",
            524295,
            3,
            const prefix0.Reflector(),
            const <int>[],
            const <int>[],
            const <int>[],
            -1,
            {},
            {},
            {},
            0,
            3,
            const <int>[],
            null,
            null),
        new r.TypeVariableMirrorImpl(
            r"X",
            r"test_reflectable.test.class_property_test.D.X",
            const prefix0.Reflector(),
            -1,
            2,
            null)
      ],
      <m.DeclarationMirror>[],
      <m.ParameterMirror>[],
      <Type>[
        prefix0.A,
        const r.FakeType(r"test_reflectable.test.class_property_test._B"),
        prefix0.D,
        prefix0.C
      ],
      4,
      {},
      {},
      <m.LibraryMirror>[
        new r.LibraryMirrorImpl(
            r"test_reflectable.test.class_property_test",
            Uri.parse(
                r"reflectable://0/test_reflectable.test.class_property_test"),
            const prefix0.Reflector(),
            const <int>[],
            {},
            {},
            null,
            null)
      ],
      [])
};

final _memberSymbolMap = null;

initializeReflectable() {
  if (!isTransformed) {
    throw new UnsupportedError(
        "The transformed code is running with the untransformed "
        "reflectable package. Remember to set your package-root to "
        "'build/.../packages'.");
  }
  r.data = _data;
  r.memberSymbolMap = _memberSymbolMap;
}
