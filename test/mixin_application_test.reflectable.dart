// This file has been generated by the reflectable package.
// https://github.com/dart-lang/reflectable.

import "dart:core";
import 'mixin_application_test.dart' as prefix0;

// ignore:unused_import
import "package:reflectable/mirrors.dart" as m;
// ignore:unused_import
import "package:reflectable/src/reflectable_transformer_based.dart" as r;
// ignore:unused_import
import "package:reflectable/reflectable.dart" show isTransformed;

final _data = {
  const prefix0.Reflector(): new r.ReflectorData(
      <m.TypeMirror>[
        new r.GenericClassMirrorImpl(
            r"M",
            r"test_reflectable.test.mixin_application_test.M",
            7,
            0,
            const prefix0.Reflector(),
            const <int>[0],
            const <int>[3, 4, 5, 6, 7, 1, 2],
            const <int>[],
            -1,
            {},
            {},
            {},
            -1,
            0,
            const <int>[],
            null,
            null, (o) {
          return o is prefix0.M && o is! prefix0.B && o is! prefix0.C;
        }, const <int>[6], 0),
        new r.NonGenericClassMirrorImpl(
            r"A",
            r"test_reflectable.test.mixin_application_test.A",
            7,
            1,
            const prefix0.Reflector(),
            const <int>[],
            const <int>[3, 4, 5, 6, 7],
            const <int>[],
            -1,
            {},
            {},
            {},
            -1,
            1,
            const <int>[],
            null,
            null),
        new r.NonGenericClassMirrorImpl(
            r"B",
            r"test_reflectable.test.mixin_application_test.B",
            7,
            2,
            const prefix0.Reflector(),
            const <int>[],
            const <int>[3, 4, 5, 6, 7, 1, 2],
            const <int>[],
            4,
            {},
            {},
            {},
            -1,
            2,
            const <int>[],
            null,
            null),
        new r.GenericClassMirrorImpl(
            r"C",
            r"test_reflectable.test.mixin_application_test.C",
            7,
            3,
            const prefix0.Reflector(),
            const <int>[],
            const <int>[3, 4, 5, 6, 7, 1, 2],
            const <int>[],
            5,
            {},
            {},
            {},
            -1,
            3,
            const <int>[],
            null,
            null, (o) {
          return o is prefix0.C;
        }, const <int>[7], 3),
        new r.NonGenericClassMirrorImpl(
            r"test_reflectable.test.mixin_application_test.A with test_reflectable.test.mixin_application_test.M",
            r"test_reflectable.test.mixin_application_test.test_reflectable.test.mixin_application_test.A with test_reflectable.test.mixin_application_test.M",
            583,
            4,
            const prefix0.Reflector(),
            const <int>[0],
            const <int>[3, 4, 5, 6, 7, 1, 2],
            const <int>[],
            1,
            const {},
            const {},
            const {},
            -1,
            0,
            const <int>[],
            null,
            null),
        new r.NonGenericClassMirrorImpl(
            r"test_reflectable.test.mixin_application_test.A with test_reflectable.test.mixin_application_test.M",
            r"test_reflectable.test.mixin_application_test.test_reflectable.test.mixin_application_test.A with test_reflectable.test.mixin_application_test.M",
            583,
            5,
            const prefix0.Reflector(),
            const <int>[0],
            const <int>[3, 4, 5, 6, 7, 1, 2],
            const <int>[],
            1,
            const {},
            const {},
            const {},
            -1,
            0,
            const <int>[],
            null,
            null),
        new r.TypeVariableMirrorImpl(
            r"E",
            r"test_reflectable.test.mixin_application_test.M.E",
            const prefix0.Reflector(),
            -1,
            0,
            null),
        new r.TypeVariableMirrorImpl(
            r"E",
            r"test_reflectable.test.mixin_application_test.C.E",
            const prefix0.Reflector(),
            -1,
            3,
            null)
      ],
      <m.DeclarationMirror>[
        new r.VariableMirrorImpl(
            r"e", 5, 0, const prefix0.Reflector(), -1, -1, -1, null),
        new r.ImplicitGetterMirrorImpl(const prefix0.Reflector(), 0, -1, -1, 1),
        new r.ImplicitSetterMirrorImpl(const prefix0.Reflector(), 0, -1, -1, 2),
        new r.MethodMirrorImpl(r"==", 131074, null, -1, 6, 6, const <int>[1],
            const prefix0.Reflector(), null),
        new r.MethodMirrorImpl(r"toString", 131074, null, -1, 7, 7,
            const <int>[], const prefix0.Reflector(), null),
        new r.MethodMirrorImpl(r"noSuchMethod", 65538, null, null, null, null,
            const <int>[2], const prefix0.Reflector(), null),
        new r.MethodMirrorImpl(r"hashCode", 131075, null, -1, 8, 8,
            const <int>[], const prefix0.Reflector(), null),
        new r.MethodMirrorImpl(r"runtimeType", 131075, null, -1, 9, 9,
            const <int>[], const prefix0.Reflector(), null)
      ],
      <m.ParameterMirror>[
        new r.ParameterMirrorImpl(r"_e", 102, 2, const prefix0.Reflector(),
            null, -1, -1, null, null, null),
        new r.ParameterMirrorImpl(r"other", 16390, 3, const prefix0.Reflector(),
            null, null, null, null, null, null),
        new r.ParameterMirrorImpl(r"invocation", 32774, 5,
            const prefix0.Reflector(), -1, 10, 10, null, null, null)
      ],
      <Type>[
        prefix0.M,
        prefix0.A,
        prefix0.B,
        prefix0.C,
        const r.FakeType(
            r"test_reflectable.test.mixin_application_test.test_reflectable.test.mixin_application_test.A with test_reflectable.test.mixin_application_test.M"),
        const r.FakeType(
            r"test_reflectable.test.mixin_application_test.test_reflectable.test.mixin_application_test.A with test_reflectable.test.mixin_application_test.M"),
        bool,
        String,
        int,
        Type,
        Invocation
      ],
      6,
      {
        r"==": (dynamic instance) => (x) => instance == x,
        r"toString": (dynamic instance) => instance.toString,
        r"noSuchMethod": (dynamic instance) => instance.noSuchMethod,
        r"hashCode": (dynamic instance) => instance.hashCode,
        r"runtimeType": (dynamic instance) => instance.runtimeType,
        r"e": (dynamic instance) => instance.e
      },
      {r"e=": (dynamic instance, value) => instance.e = value},
      null,
      [])
};

final _memberSymbolMap = null;

initializeReflectable() {
  if (!isTransformed) {
    throw new UnsupportedError(
        "The transformed code is running with the untransformed "
        "reflectable package. Remember to set your package-root to "
        "'build/.../packages'.");
  }
  r.data = _data;
  r.memberSymbolMap = _memberSymbolMap;
}
