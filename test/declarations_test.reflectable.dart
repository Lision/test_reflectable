// This file has been generated by the reflectable package.
// https://github.com/dart-lang/reflectable.

import "dart:core";
import 'declarations_test.dart' as prefix0;

// ignore:unused_import
import "package:reflectable/mirrors.dart" as m;
// ignore:unused_import
import "package:reflectable/src/reflectable_transformer_based.dart" as r;
// ignore:unused_import
import "package:reflectable/reflectable.dart" show isTransformed;

final _data = {
  const prefix0.Reflector(): new r.ReflectorData(
      <m.TypeMirror>[
        new r.NonGenericClassMirrorImpl(
            r"A",
            r"test_reflectable.test.declarations_test.A",
            519,
            0,
            const prefix0.Reflector(),
            const <int>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
            const <int>[10, 11, 12, 13, 14, 0, 1, 2, 4],
            const <int>[],
            -1,
            {},
            {},
            {
              r"factory": (b) => () => b ? new prefix0.A.factory() : null,
              r"redirectingFactory": (b) =>
                  () => b ? new prefix0.A.redirectingFactory() : null
            },
            -1,
            -1,
            const <int>[-1],
            null,
            null),
        new r.NonGenericClassMirrorImpl(
            r"B",
            r"test_reflectable.test.declarations_test.B",
            7,
            1,
            const prefix0.Reflector(),
            const <int>[15, 16, 17, 18, 19],
            const <int>[10, 11, 12, 13, 14, 0, 1, 17, 4, 15, 16, 18],
            const <int>[],
            -1,
            {},
            {},
            {r"": (b) => () => b ? new prefix0.B() : null},
            -1,
            -1,
            const <int>[-1],
            null,
            null)
      ],
      <m.DeclarationMirror>[
        new r.MethodMirrorImpl(r"foo", 65538, 0, null, -1, -1, const <int>[],
            const prefix0.Reflector(), null),
        new r.MethodMirrorImpl(r"+", 65538, 0, null, -1, -1, const <int>[0],
            const prefix0.Reflector(), null),
        new r.MethodMirrorImpl(r"getter1", 131075, 0, -1, -1, -1, const <int>[],
            const prefix0.Reflector(), null),
        new r.MethodMirrorImpl(r"getter2", 131587, 0, -1, -1, -1, const <int>[],
            const prefix0.Reflector(), null),
        new r.MethodMirrorImpl(r"setter1=", 65540, 0, null, -1, -1,
            const <int>[1], const prefix0.Reflector(), null),
        new r.MethodMirrorImpl(r"", 0, 0, -1, -1, -1, const <int>[],
            const prefix0.Reflector(), null),
        new r.MethodMirrorImpl(r"redirecting", 256, 0, -1, -1, -1,
            const <int>[], const prefix0.Reflector(), null),
        new r.MethodMirrorImpl(r"factory", 1, 0, -1, -1, -1, const <int>[],
            const prefix0.Reflector(), null),
        new r.MethodMirrorImpl(r"redirectingFactory", 385, 0, -1, -1, -1,
            const <int>[], const prefix0.Reflector(), null),
        new r.MethodMirrorImpl(r"c", 128, 0, -1, -1, -1, const <int>[],
            const prefix0.Reflector(), null),
        new r.MethodMirrorImpl(r"==", 131074, null, -1, -1, -1, const <int>[2],
            const prefix0.Reflector(), null),
        new r.MethodMirrorImpl(r"toString", 131074, null, -1, -1, -1,
            const <int>[], const prefix0.Reflector(), null),
        new r.MethodMirrorImpl(r"noSuchMethod", 65538, null, null, -1, -1,
            const <int>[3], const prefix0.Reflector(), null),
        new r.MethodMirrorImpl(r"hashCode", 131075, null, -1, -1, -1,
            const <int>[], const prefix0.Reflector(), null),
        new r.MethodMirrorImpl(r"runtimeType", 131075, null, -1, -1, -1,
            const <int>[], const prefix0.Reflector(), null),
        new r.MethodMirrorImpl(r"bar", 65538, 1, null, -1, -1, const <int>[],
            const prefix0.Reflector(), null),
        new r.MethodMirrorImpl(r"setter2=", 65540, 1, null, -1, -1,
            const <int>[4], const prefix0.Reflector(), null),
        new r.MethodMirrorImpl(r"getter1", 131075, 1, -1, -1, -1, const <int>[],
            const prefix0.Reflector(), null),
        new r.MethodMirrorImpl(r"getter2", 131075, 1, -1, -1, -1, const <int>[],
            const prefix0.Reflector(), null),
        new r.MethodMirrorImpl(r"", 64, 1, -1, -1, -1, const <int>[],
            const prefix0.Reflector(), null)
      ],
      <m.ParameterMirror>[
        new r.ParameterMirrorImpl(r"other", 32774, 1, const prefix0.Reflector(),
            -1, -1, -1, null, null, null),
        new r.ParameterMirrorImpl(r"x", 16390, 4, const prefix0.Reflector(),
            null, -1, -1, null, null, null),
        new r.ParameterMirrorImpl(r"other", 16390, 10,
            const prefix0.Reflector(), null, -1, -1, null, null, null),
        new r.ParameterMirrorImpl(r"invocation", 32774, 12,
            const prefix0.Reflector(), -1, -1, -1, null, null, null),
        new r.ParameterMirrorImpl(r"x", 16390, 16, const prefix0.Reflector(),
            null, -1, -1, null, null, null)
      ],
      <Type>[prefix0.A, prefix0.B],
      2,
      {
        r"==": (dynamic instance) => (x) => instance == x,
        r"toString": (dynamic instance) => instance.toString,
        r"noSuchMethod": (dynamic instance) => instance.noSuchMethod,
        r"hashCode": (dynamic instance) => instance.hashCode,
        r"runtimeType": (dynamic instance) => instance.runtimeType,
        r"foo": (dynamic instance) => instance.foo,
        r"+": (dynamic instance) => (x) => instance + x,
        r"getter1": (dynamic instance) => instance.getter1,
        r"bar": (dynamic instance) => instance.bar,
        r"getter2": (dynamic instance) => instance.getter2
      },
      {
        r"setter1=": (dynamic instance, value) => instance.setter1 = value,
        r"setter2=": (dynamic instance, value) => instance.setter2 = value
      },
      null,
      [])
};

final _memberSymbolMap = null;

initializeReflectable() {
  if (!isTransformed) {
    throw new UnsupportedError(
        "The transformed code is running with the untransformed "
        "reflectable package. Remember to set your package-root to "
        "'build/.../packages'.");
  }
  r.data = _data;
  r.memberSymbolMap = _memberSymbolMap;
}
