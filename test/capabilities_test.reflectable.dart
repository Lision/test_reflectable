// This file has been generated by the reflectable package.
// https://github.com/dart-lang/reflectable.

import "dart:core";
import 'capabilities_test.dart' as prefix0;

// ignore:unused_import
import "package:reflectable/mirrors.dart" as m;
// ignore:unused_import
import "package:reflectable/src/reflectable_transformer_based.dart" as r;
// ignore:unused_import
import "package:reflectable/reflectable.dart" show isTransformed;

final _data = {
  const prefix0.StaticReflector(): new r.ReflectorData(
      <m.TypeMirror>[
        new r.NonGenericClassMirrorImpl(
            r"A",
            r"test_reflectable.test.capabilities_test.A",
            7,
            0,
            const prefix0.StaticReflector(),
            const <int>[0, 1, 2, 3],
            const <int>[],
            const <int>[0, 1, 2, 3],
            -1,
            {
              r"foo": () => prefix0.A.foo,
              r"boo": () => prefix0.A.boo,
              r"getFoo": () => prefix0.A.getFoo
            },
            {r"setFoo=": (value) => prefix0.A.setFoo = value},
            {},
            -1,
            -1,
            const <int>[-1],
            null,
            null)
      ],
      <m.DeclarationMirror>[
        new r.MethodMirrorImpl(r"foo", 131090, 0, -1, -1, -1, const <int>[],
            const prefix0.StaticReflector(), null),
        new r.MethodMirrorImpl(r"boo", 131090, 0, -1, -1, -1, const <int>[],
            const prefix0.StaticReflector(), null),
        new r.MethodMirrorImpl(r"getFoo", 131091, 0, -1, -1, -1, const <int>[],
            const prefix0.StaticReflector(), null),
        new r.MethodMirrorImpl(r"setFoo=", 65556, 0, null, -1, -1,
            const <int>[0], const prefix0.StaticReflector(), null)
      ],
      <m.ParameterMirror>[
        new r.ParameterMirrorImpl(r"x", 32774, 3,
            const prefix0.StaticReflector(), -1, -1, -1, null, null, null)
      ],
      <Type>[prefix0.A],
      1,
      {},
      {},
      null,
      []),
  const prefix0.InstanceReflector(): new r.ReflectorData(
      <m.TypeMirror>[
        new r.NonGenericClassMirrorImpl(
            r"B",
            r"test_reflectable.test.capabilities_test.B",
            7,
            0,
            const prefix0.InstanceReflector(),
            const <int>[0, 1, 2, 3],
            const <int>[4, 0, 1, 2, 3],
            const <int>[],
            -1,
            {},
            {},
            {},
            -1,
            -1,
            const <int>[-1],
            null,
            null)
      ],
      <m.DeclarationMirror>[
        new r.MethodMirrorImpl(r"foo", 131074, 0, -1, -1, -1, const <int>[],
            const prefix0.InstanceReflector(), null),
        new r.MethodMirrorImpl(r"boo", 131074, 0, -1, -1, -1, const <int>[],
            const prefix0.InstanceReflector(), null),
        new r.MethodMirrorImpl(r"getFoo", 131075, 0, -1, -1, -1, const <int>[],
            const prefix0.InstanceReflector(), null),
        new r.MethodMirrorImpl(r"setFoo=", 65540, 0, null, -1, -1,
            const <int>[0], const prefix0.InstanceReflector(), null),
        new r.MethodMirrorImpl(r"includedByInvokeInBBase", 131074, null, -1, -1,
            -1, const <int>[], const prefix0.InstanceReflector(), null)
      ],
      <m.ParameterMirror>[
        new r.ParameterMirrorImpl(r"x", 32774, 3,
            const prefix0.InstanceReflector(), -1, -1, -1, null, null, null)
      ],
      <Type>[prefix0.B],
      1,
      {
        r"includedByInvokeInBBase": (dynamic instance) =>
            instance.includedByInvokeInBBase,
        r"foo": (dynamic instance) => instance.foo,
        r"boo": (dynamic instance) => instance.boo,
        r"getFoo": (dynamic instance) => instance.getFoo
      },
      {r"setFoo=": (dynamic instance, value) => instance.setFoo = value},
      null,
      [])
};

final _memberSymbolMap = null;

initializeReflectable() {
  if (!isTransformed) {
    throw new UnsupportedError(
        "The transformed code is running with the untransformed "
        "reflectable package. Remember to set your package-root to "
        "'build/.../packages'.");
  }
  r.data = _data;
  r.memberSymbolMap = _memberSymbolMap;
}
