// This file has been generated by the reflectable package.
// https://github.com/dart-lang/reflectable.

import "dart:core";
import 'private_class_library.dart' as prefix1;
import 'private_class_test.dart' as prefix0;

// ignore:unused_import
import "package:reflectable/mirrors.dart" as m;
// ignore:unused_import
import "package:reflectable/src/reflectable_transformer_based.dart" as r;
// ignore:unused_import
import "package:reflectable/reflectable.dart" show isTransformed;

final _data = {
  const prefix0.PrivacyReflectable(): new r.ReflectorData(
      <m.TypeMirror>[
        new r.NonGenericClassMirrorImpl(
            r"PublicClass",
            r"test_reflectable.test.private_class_library.PublicClass",
            7,
            0,
            const prefix0.PrivacyReflectable(),
            const <int>[0],
            const <int>[1, 2, 3, 4, 5, 0],
            const <int>[],
            -1,
            {},
            {},
            {},
            0,
            -1,
            const <int>[-1],
            null,
            null),
        new r.NonGenericClassMirrorImpl(
            r"_PrivateClass1",
            r"test_reflectable.test.private_class_library._PrivateClass1",
            39,
            1,
            const prefix0.PrivacyReflectable(),
            const <int>[6],
            const <int>[1, 2, 3, 4, 5, 0, 6],
            const <int>[],
            -1,
            {},
            {},
            {},
            0,
            -1,
            const <int>[-1],
            null,
            null),
        new r.NonGenericClassMirrorImpl(
            r"_PrivateClass2",
            r"test_reflectable.test.private_class_library._PrivateClass2",
            39,
            2,
            const prefix0.PrivacyReflectable(),
            const <int>[7, 8],
            const <int>[1, 2, 3, 4, 5, 7, 8],
            const <int>[],
            -1,
            {},
            {},
            {},
            0,
            -1,
            const <int>[-1],
            null,
            null),
        new r.NonGenericClassMirrorImpl(
            r"PublicSubclass1",
            r"test_reflectable.test.private_class_library.PublicSubclass1",
            7,
            3,
            const prefix0.PrivacyReflectable(),
            const <int>[],
            const <int>[1, 2, 3, 4, 5, 0, 6],
            const <int>[],
            -1,
            {},
            {},
            {},
            0,
            -1,
            const <int>[-1],
            null,
            null),
        new r.NonGenericClassMirrorImpl(
            r"PublicSubclass2",
            r"test_reflectable.test.private_class_library.PublicSubclass2",
            7,
            4,
            const prefix0.PrivacyReflectable(),
            const <int>[],
            const <int>[1, 2, 3, 4, 5, 7, 8],
            const <int>[],
            -1,
            {},
            {},
            {},
            0,
            -1,
            const <int>[-1],
            null,
            null)
      ],
      <m.DeclarationMirror>[
        new r.MethodMirrorImpl(r"publicMethod", 131074, 0, -1, 5, 5,
            const <int>[], const prefix0.PrivacyReflectable(), null),
        new r.MethodMirrorImpl(r"==", 131074, null, -1, 6, 6, const <int>[0],
            const prefix0.PrivacyReflectable(), null),
        new r.MethodMirrorImpl(r"toString", 131074, null, -1, 7, 7,
            const <int>[], const prefix0.PrivacyReflectable(), null),
        new r.MethodMirrorImpl(r"noSuchMethod", 65538, null, null, null, null,
            const <int>[1], const prefix0.PrivacyReflectable(), null),
        new r.MethodMirrorImpl(r"hashCode", 131075, null, -1, 5, 5,
            const <int>[], const prefix0.PrivacyReflectable(), null),
        new r.MethodMirrorImpl(r"runtimeType", 131075, null, -1, 8, 8,
            const <int>[], const prefix0.PrivacyReflectable(), null),
        new r.MethodMirrorImpl(r"supposedlyPrivate", 131074, 1, -1, 5, 5,
            const <int>[], const prefix0.PrivacyReflectable(), null),
        new r.MethodMirrorImpl(r"publicMethod", 131074, 2, -1, 5, 5,
            const <int>[], const prefix0.PrivacyReflectable(), null),
        new r.MethodMirrorImpl(r"supposedlyPrivateToo", 131074, 2, -1, 5, 5,
            const <int>[], const prefix0.PrivacyReflectable(), null)
      ],
      <m.ParameterMirror>[
        new r.ParameterMirrorImpl(
            r"other",
            16390,
            1,
            const prefix0.PrivacyReflectable(),
            null,
            null,
            null,
            null,
            null,
            null),
        new r.ParameterMirrorImpl(r"invocation", 32774, 3,
            const prefix0.PrivacyReflectable(), -1, 9, 9, null, null, null)
      ],
      <Type>[
        prefix1.PublicClass,
        const r.FakeType(
            r"test_reflectable.test.private_class_library._PrivateClass1"),
        const r.FakeType(
            r"test_reflectable.test.private_class_library._PrivateClass2"),
        prefix1.PublicSubclass1,
        prefix1.PublicSubclass2,
        int,
        bool,
        String,
        Type,
        Invocation
      ],
      5,
      {
        r"==": (dynamic instance) => (x) => instance == x,
        r"toString": (dynamic instance) => instance.toString,
        r"noSuchMethod": (dynamic instance) => instance.noSuchMethod,
        r"hashCode": (dynamic instance) => instance.hashCode,
        r"runtimeType": (dynamic instance) => instance.runtimeType,
        r"publicMethod": (dynamic instance) => instance.publicMethod,
        r"supposedlyPrivate": (dynamic instance) => instance.supposedlyPrivate,
        r"supposedlyPrivateToo": (dynamic instance) =>
            instance.supposedlyPrivateToo
      },
      {},
      <m.LibraryMirror>[
        new r.LibraryMirrorImpl(
            r"test_reflectable.test.private_class_library",
            Uri.parse(
                r"reflectable://0/test_reflectable.test.private_class_library"),
            const prefix0.PrivacyReflectable(),
            const <int>[],
            {},
            {},
            null,
            null)
      ],
      [])
};

final _memberSymbolMap = null;

initializeReflectable() {
  if (!isTransformed) {
    throw new UnsupportedError(
        "The transformed code is running with the untransformed "
        "reflectable package. Remember to set your package-root to "
        "'build/.../packages'.");
  }
  r.data = _data;
  r.memberSymbolMap = _memberSymbolMap;
}
