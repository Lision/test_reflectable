// This file has been generated by the reflectable package.
// https://github.com/dart-lang/reflectable.

import "dart:core";
import 'corresponding_setter_test.dart' as prefix0;

// ignore:unused_import
import "package:reflectable/mirrors.dart" as m;
// ignore:unused_import
import "package:reflectable/src/reflectable_transformer_based.dart" as r;
// ignore:unused_import
import "package:reflectable/reflectable.dart" show isTransformed;

final _data = {
  const prefix0.TopLevelInvokeMetaReflector(): new r.ReflectorData(
      <m.TypeMirror>[],
      null,
      null,
      <Type>[],
      0,
      {},
      {},
      <m.LibraryMirror>[
        new r.LibraryMirrorImpl(
            r"test_reflectable.test.corresponding_setter_test",
            Uri.parse(
                r"reflectable://0/test_reflectable.test.corresponding_setter_test"),
            const prefix0.TopLevelInvokeMetaReflector(),
            const <int>[-1],
            {r"fooBar": () => prefix0.fooBar},
            {r"fooBar=": (value) => prefix0.fooBar = value},
            null,
            {r"fooBar": 0, r"fooBar=": 1})
      ],
      [
        const [0, 0, null],
        const [1, 0, null]
      ]),
  const prefix0.TopLevelInvokeFrReflector(): new r.ReflectorData(
      <m.TypeMirror>[],
      null,
      null,
      <Type>[],
      0,
      {},
      {},
      <m.LibraryMirror>[
        new r.LibraryMirrorImpl(
            r"test_reflectable.test.corresponding_setter_test",
            Uri.parse(
                r"reflectable://0/test_reflectable.test.corresponding_setter_test"),
            const prefix0.TopLevelInvokeFrReflector(),
            const <int>[-1],
            {
              r"invokingMetaReflector": () => prefix0.invokingMetaReflector,
              r"instanceInvokeMetaReflector": () =>
                  prefix0.instanceInvokeMetaReflector,
              r"staticInvokeMetaReflector": () =>
                  prefix0.staticInvokeMetaReflector,
              r"topLevelInvokeMetaReflector": () =>
                  prefix0.topLevelInvokeMetaReflector,
              r"invokingFrReflector": () => prefix0.invokingFrReflector,
              r"instanceInvokeFrReflector": () =>
                  prefix0.instanceInvokeFrReflector,
              r"staticInvokeFrReflector": () => prefix0.staticInvokeFrReflector,
              r"topLevelInvokeFrReflector": () =>
                  prefix0.topLevelInvokeFrReflector,
              r"fooBar": () => prefix0.fooBar
            },
            {r"fooBar=": (value) => prefix0.fooBar = value},
            null,
            {
              r"invokingMetaReflector": 0,
              r"instanceInvokeMetaReflector": 0,
              r"staticInvokeMetaReflector": 0,
              r"topLevelInvokeMetaReflector": 0,
              r"invokingFrReflector": 0,
              r"instanceInvokeFrReflector": 0,
              r"staticInvokeFrReflector": 0,
              r"topLevelInvokeFrReflector": 0,
              r"fooBar": 0,
              r"fooBar=": 1
            })
      ],
      [
        const [0, 0, null],
        const [1, 0, null]
      ]),
  const prefix0.InvokingMetaReflector(): new r.ReflectorData(
      <m.TypeMirror>[
        new r.NonGenericClassMirrorImpl(
            r"A",
            r"test_reflectable.test.corresponding_setter_test.A",
            7,
            0,
            const prefix0.InvokingMetaReflector(),
            const <int>[-1],
            null,
            null,
            -1,
            {},
            {},
            {},
            -1,
            -1,
            const <int>[-1],
            null,
            {r"foo": 0, r"foobar": 0, r"foo=": 1, r"foobar=": 1}),
        new r.NonGenericClassMirrorImpl(
            r"B",
            r"test_reflectable.test.corresponding_setter_test.B",
            7,
            1,
            const prefix0.InvokingMetaReflector(),
            const <int>[-1],
            null,
            null,
            -1,
            {r"foo": () => prefix0.B.foo, r"foobar": () => prefix0.B.foobar},
            {
              r"foo=": (value) => prefix0.B.foo = value,
              r"foobar=": (value) => prefix0.B.foobar = value
            },
            {},
            -1,
            -1,
            const <int>[-1],
            null,
            {r"foo": 0, r"foobar": 0, r"foo=": 1, r"foobar=": 1})
      ],
      null,
      null,
      <Type>[prefix0.A, prefix0.B],
      2,
      {
        r"foo": (dynamic instance) => instance.foo,
        r"foobar": (dynamic instance) => instance.foobar
      },
      {
        r"foo=": (dynamic instance, value) => instance.foo = value,
        r"foobar=": (dynamic instance, value) => instance.foobar = value
      },
      null,
      [
        const [0, 0, null],
        const [1, 0, null]
      ]),
  const prefix0.InstanceInvokeMetaReflector(): new r.ReflectorData(
      <m.TypeMirror>[
        new r.NonGenericClassMirrorImpl(
            r"A",
            r"test_reflectable.test.corresponding_setter_test.A",
            7,
            0,
            const prefix0.InstanceInvokeMetaReflector(),
            const <int>[-1],
            null,
            null,
            -1,
            {},
            {},
            {},
            -1,
            -1,
            const <int>[-1],
            null,
            {r"foo": 0, r"foobar": 0, r"foo=": 1, r"foobar=": 1})
      ],
      null,
      null,
      <Type>[prefix0.A],
      1,
      {
        r"foo": (dynamic instance) => instance.foo,
        r"foobar": (dynamic instance) => instance.foobar
      },
      {
        r"foo=": (dynamic instance, value) => instance.foo = value,
        r"foobar=": (dynamic instance, value) => instance.foobar = value
      },
      null,
      [
        const [0, 0, null],
        const [1, 0, null]
      ]),
  const prefix0.InvokingFrReflector(): new r.ReflectorData(
      <m.TypeMirror>[
        new r.NonGenericClassMirrorImpl(
            r"A",
            r"test_reflectable.test.corresponding_setter_test.A",
            7,
            0,
            const prefix0.InvokingFrReflector(),
            const <int>[-1],
            null,
            null,
            -1,
            {},
            {},
            {},
            -1,
            -1,
            const <int>[-1],
            null,
            {r"foobar": 0, r"foobar=": 1}),
        new r.NonGenericClassMirrorImpl(
            r"B",
            r"test_reflectable.test.corresponding_setter_test.B",
            7,
            1,
            const prefix0.InvokingFrReflector(),
            const <int>[-1],
            null,
            null,
            -1,
            {r"foobar": () => prefix0.B.foobar},
            {r"foobar=": (value) => prefix0.B.foobar = value},
            {},
            -1,
            -1,
            const <int>[-1],
            null,
            {r"foobar": 0, r"foobar=": 1})
      ],
      null,
      null,
      <Type>[prefix0.A, prefix0.B],
      2,
      {r"foobar": (dynamic instance) => instance.foobar},
      {r"foobar=": (dynamic instance, value) => instance.foobar = value},
      null,
      [
        const [0, 0, null],
        const [1, 0, null]
      ]),
  const prefix0.InstanceInvokeFrReflector(): new r.ReflectorData(
      <m.TypeMirror>[
        new r.NonGenericClassMirrorImpl(
            r"A",
            r"test_reflectable.test.corresponding_setter_test.A",
            7,
            0,
            const prefix0.InstanceInvokeFrReflector(),
            const <int>[-1],
            null,
            null,
            -1,
            {},
            {},
            {},
            -1,
            -1,
            const <int>[-1],
            null,
            {r"foobar": 0, r"foobar=": 1})
      ],
      null,
      null,
      <Type>[prefix0.A],
      1,
      {r"foobar": (dynamic instance) => instance.foobar},
      {r"foobar=": (dynamic instance, value) => instance.foobar = value},
      null,
      [
        const [0, 0, null],
        const [1, 0, null]
      ]),
  const prefix0.StaticInvokeMetaReflector(): new r.ReflectorData(
      <m.TypeMirror>[
        new r.NonGenericClassMirrorImpl(
            r"B",
            r"test_reflectable.test.corresponding_setter_test.B",
            7,
            0,
            const prefix0.StaticInvokeMetaReflector(),
            const <int>[-1],
            null,
            null,
            -1,
            {r"foo": () => prefix0.B.foo, r"foobar": () => prefix0.B.foobar},
            {
              r"foo=": (value) => prefix0.B.foo = value,
              r"foobar=": (value) => prefix0.B.foobar = value
            },
            {},
            -1,
            -1,
            const <int>[-1],
            null,
            {r"foo": 0, r"foobar": 0, r"foo=": 1, r"foobar=": 1})
      ],
      null,
      null,
      <Type>[prefix0.B],
      1,
      {},
      {},
      null,
      [
        const [0, 0, null],
        const [1, 0, null]
      ]),
  const prefix0.StaticInvokeFrReflector(): new r.ReflectorData(
      <m.TypeMirror>[
        new r.NonGenericClassMirrorImpl(
            r"B",
            r"test_reflectable.test.corresponding_setter_test.B",
            7,
            0,
            const prefix0.StaticInvokeFrReflector(),
            const <int>[-1],
            null,
            null,
            -1,
            {r"foobar": () => prefix0.B.foobar},
            {r"foobar=": (value) => prefix0.B.foobar = value},
            {},
            -1,
            -1,
            const <int>[-1],
            null,
            {r"foobar": 0, r"foobar=": 1})
      ],
      null,
      null,
      <Type>[prefix0.B],
      1,
      {},
      {},
      null,
      [
        const [0, 0, null],
        const [1, 0, null]
      ])
};

final _memberSymbolMap = null;

initializeReflectable() {
  if (!isTransformed) {
    throw new UnsupportedError(
        "The transformed code is running with the untransformed "
        "reflectable package. Remember to set your package-root to "
        "'build/.../packages'.");
  }
  r.data = _data;
  r.memberSymbolMap = _memberSymbolMap;
}
