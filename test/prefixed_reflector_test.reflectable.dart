// This file has been generated by the reflectable package.
// https://github.com/dart-lang/reflectable.

import "dart:core";
import 'prefixed_reflector_test.dart' as prefix0;

// ignore:unused_import
import "package:reflectable/mirrors.dart" as m;
// ignore:unused_import
import "package:reflectable/src/reflectable_transformer_based.dart" as r;
// ignore:unused_import
import "package:reflectable/reflectable.dart" show isTransformed;

final _data = {
  const prefix0.Reflector(): new r.ReflectorData(
      <m.TypeMirror>[
        new r.NonGenericClassMirrorImpl(
            r"D",
            r"test_reflectable.test.prefixed_reflector_test.D",
            7,
            0,
            const prefix0.Reflector(),
            const <int>[1, 2],
            const <int>[3, 4, 5, 6, 7, 1, 2],
            const <int>[],
            -1,
            {},
            {},
            {},
            0,
            -1,
            const <int>[-1],
            null,
            null)
      ],
      <m.DeclarationMirror>[
        new r.MethodMirrorImpl(r"main", 1114136, 0, null, null, null,
            const <int>[], const prefix0.Reflector(), null),
        new r.MethodMirrorImpl(r"getter", 131075, 0, -1, 1, 1, const <int>[],
            const prefix0.Reflector(), null),
        new r.MethodMirrorImpl(r"setter=", 262148, 0, null, -1, -1,
            const <int>[0], const prefix0.Reflector(), null),
        new r.MethodMirrorImpl(r"==", 131074, null, -1, 2, 2, const <int>[1],
            const prefix0.Reflector(), null),
        new r.MethodMirrorImpl(r"toString", 131074, null, -1, 3, 3,
            const <int>[], const prefix0.Reflector(), null),
        new r.MethodMirrorImpl(r"noSuchMethod", 65538, null, null, null, null,
            const <int>[2], const prefix0.Reflector(), null),
        new r.MethodMirrorImpl(r"hashCode", 131075, null, -1, 1, 1,
            const <int>[], const prefix0.Reflector(), null),
        new r.MethodMirrorImpl(r"runtimeType", 131075, null, -1, 4, 4,
            const <int>[], const prefix0.Reflector(), null)
      ],
      <m.ParameterMirror>[
        new r.ParameterMirrorImpl(r"owtytrof", 32774, 2,
            const prefix0.Reflector(), -1, 1, 1, null, null, null),
        new r.ParameterMirrorImpl(r"other", 16390, 3, const prefix0.Reflector(),
            null, null, null, null, null, null),
        new r.ParameterMirrorImpl(r"invocation", 32774, 5,
            const prefix0.Reflector(), -1, 5, 5, null, null, null)
      ],
      <Type>[prefix0.D, int, bool, String, Type, Invocation],
      1,
      {
        r"==": (dynamic instance) => (x) => instance == x,
        r"toString": (dynamic instance) => instance.toString,
        r"noSuchMethod": (dynamic instance) => instance.noSuchMethod,
        r"hashCode": (dynamic instance) => instance.hashCode,
        r"runtimeType": (dynamic instance) => instance.runtimeType,
        r"getter": (dynamic instance) => instance.getter
      },
      {r"setter=": (dynamic instance, value) => instance.setter = value},
      <m.LibraryMirror>[
        new r.LibraryMirrorImpl(
            r"test_reflectable.test.prefixed_reflector_test",
            Uri.parse(
                r"reflectable://0/test_reflectable.test.prefixed_reflector_test"),
            const prefix0.Reflector(),
            const <int>[0],
            {r"main": () => prefix0.main},
            {},
            null,
            null)
      ],
      [])
};

final _memberSymbolMap = null;

initializeReflectable() {
  if (!isTransformed) {
    throw new UnsupportedError(
        "The transformed code is running with the untransformed "
        "reflectable package. Remember to set your package-root to "
        "'build/.../packages'.");
  }
  r.data = _data;
  r.memberSymbolMap = _memberSymbolMap;
}
