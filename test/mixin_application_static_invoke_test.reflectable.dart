// This file has been generated by the reflectable package.
// https://github.com/dart-lang/reflectable.

import "dart:core";
import 'mixin_application_static_invoke_test.dart' as prefix0;

// ignore:unused_import
import "package:reflectable/mirrors.dart" as m;
// ignore:unused_import
import "package:reflectable/src/reflectable_transformer_based.dart" as r;
// ignore:unused_import
import "package:reflectable/reflectable.dart" show isTransformed;

final _data = {
  const prefix0.Reflector(): new r.ReflectorData(
      <m.TypeMirror>[
        new r.NonGenericClassMirrorImpl(
            r"M",
            r"test_reflectable.test.mixin_application_static_invoke_test.M",
            7,
            0,
            const prefix0.Reflector(),
            const <int>[0, 1],
            const <int>[2, 3, 4, 5, 6],
            const <int>[0],
            -1,
            {r"staticFoo": () => prefix0.M.staticFoo},
            {},
            {r"": (b) => () => b ? new prefix0.M() : null},
            0,
            0,
            const <int>[],
            null,
            null),
        new r.NonGenericClassMirrorImpl(
            r"A",
            r"test_reflectable.test.mixin_application_static_invoke_test.A",
            7,
            1,
            const prefix0.Reflector(),
            const <int>[7, 8],
            const <int>[2, 3, 4, 5, 6],
            const <int>[7],
            -1,
            {r"staticFoo": () => prefix0.A.staticFoo},
            {},
            {r"": (b) => () => b ? new prefix0.A() : null},
            0,
            1,
            const <int>[],
            null,
            null),
        new r.NonGenericClassMirrorImpl(
            r"B",
            r"test_reflectable.test.mixin_application_static_invoke_test.B",
            7,
            2,
            const prefix0.Reflector(),
            const <int>[9, 10],
            const <int>[2, 3, 4, 5, 6],
            const <int>[9],
            3,
            {r"staticFoo": () => prefix0.B.staticFoo},
            {},
            {r"": (b) => () => b ? new prefix0.B() : null},
            0,
            2,
            const <int>[],
            null,
            null),
        new r.NonGenericClassMirrorImpl(
            r"test_reflectable.test.mixin_application_static_invoke_test.A with test_reflectable.test.mixin_application_static_invoke_test.M",
            r"test_reflectable.test.mixin_application_static_invoke_test.test_reflectable.test.mixin_application_static_invoke_test.A with test_reflectable.test.mixin_application_static_invoke_test.M",
            583,
            3,
            const prefix0.Reflector(),
            const <int>[],
            const <int>[2, 3, 4, 5, 6],
            const <int>[],
            1,
            const {},
            const {},
            const {},
            0,
            0,
            const <int>[],
            null,
            null)
      ],
      <m.DeclarationMirror>[
        new r.MethodMirrorImpl(r"staticFoo", 65554, 0, null, -1, -1,
            const <int>[0], const prefix0.Reflector(), null),
        new r.MethodMirrorImpl(r"", 64, 0, -1, -1, -1, const <int>[],
            const prefix0.Reflector(), null),
        new r.MethodMirrorImpl(r"==", 131074, null, -1, -1, -1, const <int>[1],
            const prefix0.Reflector(), null),
        new r.MethodMirrorImpl(r"toString", 131074, null, -1, -1, -1,
            const <int>[], const prefix0.Reflector(), null),
        new r.MethodMirrorImpl(r"noSuchMethod", 65538, null, null, -1, -1,
            const <int>[2], const prefix0.Reflector(), null),
        new r.MethodMirrorImpl(r"hashCode", 131075, null, -1, -1, -1,
            const <int>[], const prefix0.Reflector(), null),
        new r.MethodMirrorImpl(r"runtimeType", 131075, null, -1, -1, -1,
            const <int>[], const prefix0.Reflector(), null),
        new r.MethodMirrorImpl(r"staticFoo", 65554, 1, null, -1, -1,
            const <int>[3], const prefix0.Reflector(), null),
        new r.MethodMirrorImpl(r"", 64, 1, -1, -1, -1, const <int>[],
            const prefix0.Reflector(), null),
        new r.MethodMirrorImpl(r"staticFoo", 65554, 2, null, -1, -1,
            const <int>[4], const prefix0.Reflector(), null),
        new r.MethodMirrorImpl(r"", 64, 2, -1, -1, -1, const <int>[],
            const prefix0.Reflector(), null)
      ],
      <m.ParameterMirror>[
        new r.ParameterMirrorImpl(r"x", 16390, 0, const prefix0.Reflector(),
            null, -1, -1, null, null, null),
        new r.ParameterMirrorImpl(r"other", 16390, 2, const prefix0.Reflector(),
            null, -1, -1, null, null, null),
        new r.ParameterMirrorImpl(r"invocation", 32774, 4,
            const prefix0.Reflector(), -1, -1, -1, null, null, null),
        new r.ParameterMirrorImpl(r"x", 16390, 7, const prefix0.Reflector(),
            null, -1, -1, null, null, null),
        new r.ParameterMirrorImpl(r"x", 16390, 9, const prefix0.Reflector(),
            null, -1, -1, null, null, null)
      ],
      <Type>[
        prefix0.M,
        prefix0.A,
        prefix0.B,
        const r.FakeType(
            r"test_reflectable.test.mixin_application_static_invoke_test.test_reflectable.test.mixin_application_static_invoke_test.A with test_reflectable.test.mixin_application_static_invoke_test.M")
      ],
      4,
      {
        r"==": (dynamic instance) => (x) => instance == x,
        r"toString": (dynamic instance) => instance.toString,
        r"noSuchMethod": (dynamic instance) => instance.noSuchMethod,
        r"hashCode": (dynamic instance) => instance.hashCode,
        r"runtimeType": (dynamic instance) => instance.runtimeType
      },
      {},
      <m.LibraryMirror>[
        new r.LibraryMirrorImpl(
            r"test_reflectable.test.mixin_application_static_invoke_test",
            Uri.parse(
                r"reflectable://0/test_reflectable.test.mixin_application_static_invoke_test"),
            const prefix0.Reflector(),
            const <int>[],
            {},
            {},
            null,
            null)
      ],
      [])
};

final _memberSymbolMap = null;

initializeReflectable() {
  if (!isTransformed) {
    throw new UnsupportedError(
        "The transformed code is running with the untransformed "
        "reflectable package. Remember to set your package-root to "
        "'build/.../packages'.");
  }
  r.data = _data;
  r.memberSymbolMap = _memberSymbolMap;
}
