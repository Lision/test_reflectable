// This file has been generated by the reflectable package.
// https://github.com/dart-lang/reflectable.

import "dart:core";
import 'new_instance_test.dart' as prefix0;

// ignore:unused_import
import "package:reflectable/mirrors.dart" as m;
// ignore:unused_import
import "package:reflectable/src/reflectable_transformer_based.dart" as r;
// ignore:unused_import
import "package:reflectable/reflectable.dart" show isTransformed;

final _data = {
  const prefix0.Reflector(): new r.ReflectorData(
      <m.TypeMirror>[
        new r.NonGenericClassMirrorImpl(
            r"A",
            r"test_reflectable.test.new_instance_test.A",
            7,
            0,
            const prefix0.Reflector(),
            const <int>[-1],
            null,
            null,
            -1,
            {},
            {},
            {
              r"": (b) => () => b ? new prefix0.A() : null,
              r"positional": (b) =>
                  (x) => b ? new prefix0.A.positional(x) : null,
              r"optional": (b) => (x, y, [z = 1, w]) =>
                  b ? new prefix0.A.optional(x, y, z, w) : null,
              r"argNamed": (b) => (x, y, {z: 42, p}) =>
                  b ? new prefix0.A.argNamed(x, y, z: z, p: p) : null,
              r"noMeta": (bb) => (b) => bb ? new prefix0.A.noMeta(b) : null
            },
            -1,
            -1,
            const <int>[-1],
            null,
            {})
      ],
      null,
      null,
      <Type>[prefix0.A],
      1,
      {},
      {},
      null,
      [
        const [0, 0, null],
        const [1, 0, null],
        const [4, 2, null],
        const [
          2,
          0,
          const [#z, #p]
        ]
      ]),
  const prefix0.MetaReflector(): new r.ReflectorData(
      <m.TypeMirror>[
        new r.NonGenericClassMirrorImpl(
            r"A",
            r"test_reflectable.test.new_instance_test.A",
            7,
            0,
            const prefix0.MetaReflector(),
            const <int>[-1],
            null,
            null,
            -1,
            {},
            {},
            {
              r"": (b) => () => b ? new prefix0.A() : null,
              r"positional": (b) =>
                  (x) => b ? new prefix0.A.positional(x) : null,
              r"optional": (b) => (x, y, [z = 1, w]) =>
                  b ? new prefix0.A.optional(x, y, z, w) : null,
              r"argNamed": (b) => (x, y, {z: 42, p}) =>
                  b ? new prefix0.A.argNamed(x, y, z: z, p: p) : null
            },
            -1,
            -1,
            const <int>[-1],
            null,
            {})
      ],
      null,
      null,
      <Type>[prefix0.A],
      1,
      {},
      {},
      null,
      [
        const [0, 0, null],
        const [1, 0, null],
        const [4, 2, null],
        const [
          2,
          0,
          const [#z, #p]
        ]
      ])
};

final _memberSymbolMap = null;

initializeReflectable() {
  if (!isTransformed) {
    throw new UnsupportedError(
        "The transformed code is running with the untransformed "
        "reflectable package. Remember to set your package-root to "
        "'build/.../packages'.");
  }
  r.data = _data;
  r.memberSymbolMap = _memberSymbolMap;
}
