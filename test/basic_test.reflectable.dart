// This file has been generated by the reflectable package.
// https://github.com/dart-lang/reflectable.

import "dart:core";
import 'basic_test.dart' as prefix0;

// ignore:unused_import
import "package:reflectable/mirrors.dart" as m;
// ignore:unused_import
import "package:reflectable/src/reflectable_transformer_based.dart" as r;
// ignore:unused_import
import "package:reflectable/reflectable.dart" show isTransformed;

final _data = {
  const prefix0.MyReflectable(): new r.ReflectorData(
      <m.TypeMirror>[
        new r.NonGenericClassMirrorImpl(
            r"A",
            r"test_reflectable.test.basic_test.A",
            7,
            0,
            const prefix0.MyReflectable(),
            const <int>[0, 1, 2, 5, 6, 7],
            const <int>[8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6],
            const <int>[],
            -1,
            {},
            {},
            {r"": (b) => () => b ? new prefix0.A() : null},
            -1,
            -1,
            const <int>[-1],
            null,
            null),
        new r.NonGenericClassMirrorImpl(
            r"B",
            r"test_reflectable.test.basic_test.B",
            7,
            1,
            const prefix0.MyReflectable(),
            const <int>[13, 14, 15, 16, 17, 18],
            const <int>[8, 9, 10, 11, 12, 13, 2, 15, 4, 16, 17, 14],
            const <int>[],
            -1,
            {},
            {},
            {r"": (b) => () => b ? new prefix0.B() : null},
            -1,
            -1,
            const <int>[-1],
            null,
            null),
        new r.NonGenericClassMirrorImpl(
            r"C",
            r"test_reflectable.test.basic_test.C",
            7,
            2,
            const prefix0.MyReflectable(),
            const <int>[19, 20, 21, 22, 23, 24],
            const <int>[8, 9, 10, 11, 12, 19, 2, 15, 21, 22, 23, 14, 20],
            const <int>[],
            -1,
            {},
            {},
            {r"": (b) => () => b ? new prefix0.C() : null},
            -1,
            -1,
            const <int>[-1],
            null,
            null)
      ],
      <m.DeclarationMirror>[
        new r.VariableMirrorImpl(r"foo", 16389, 0,
            const prefix0.MyReflectable(), null, -1, -1, null),
        new r.MethodMirrorImpl(r"instanceMethod", 65538, 0, null, -1, -1,
            const <int>[0], const prefix0.MyReflectable(), null),
        new r.MethodMirrorImpl(r"aMethod", 65538, 0, null, -1, -1,
            const <int>[], const prefix0.MyReflectable(), null),
        new r.ImplicitGetterMirrorImpl(
            const prefix0.MyReflectable(), 0, -1, -1, 3),
        new r.ImplicitSetterMirrorImpl(
            const prefix0.MyReflectable(), 0, -1, -1, 4),
        new r.MethodMirrorImpl(r"accessor", 65539, 0, null, -1, -1,
            const <int>[], const prefix0.MyReflectable(), null),
        new r.MethodMirrorImpl(r"accessor=", 65540, 0, null, -1, -1,
            const <int>[2], const prefix0.MyReflectable(), null),
        new r.MethodMirrorImpl(r"", 64, 0, -1, -1, -1, const <int>[],
            const prefix0.MyReflectable(), null),
        new r.MethodMirrorImpl(r"==", 131074, null, -1, -1, -1, const <int>[3],
            const prefix0.MyReflectable(), null),
        new r.MethodMirrorImpl(r"toString", 131074, null, -1, -1, -1,
            const <int>[], const prefix0.MyReflectable(), null),
        new r.MethodMirrorImpl(r"noSuchMethod", 65538, null, null, -1, -1,
            const <int>[4], const prefix0.MyReflectable(), null),
        new r.MethodMirrorImpl(r"hashCode", 131075, null, -1, -1, -1,
            const <int>[], const prefix0.MyReflectable(), null),
        new r.MethodMirrorImpl(r"runtimeType", 131075, null, -1, -1, -1,
            const <int>[], const prefix0.MyReflectable(), null),
        new r.MethodMirrorImpl(r"instanceMethod", 65538, 1, null, -1, -1,
            const <int>[5], const prefix0.MyReflectable(), null),
        new r.MethodMirrorImpl(r"bMethod", 65538, 1, null, -1, -1,
            const <int>[], const prefix0.MyReflectable(), null),
        new r.MethodMirrorImpl(r"foo", 65539, 1, null, -1, -1, const <int>[],
            const prefix0.MyReflectable(), null),
        new r.MethodMirrorImpl(r"accessor", 65539, 1, null, -1, -1,
            const <int>[], const prefix0.MyReflectable(), null),
        new r.MethodMirrorImpl(r"accessor=", 65540, 1, null, -1, -1,
            const <int>[6], const prefix0.MyReflectable(), null),
        new r.MethodMirrorImpl(r"", 64, 1, -1, -1, -1, const <int>[],
            const prefix0.MyReflectable(), null),
        new r.MethodMirrorImpl(r"instanceMethod", 65538, 2, null, -1, -1,
            const <int>[7], const prefix0.MyReflectable(), null),
        new r.MethodMirrorImpl(r"cMethod", 65538, 2, null, -1, -1,
            const <int>[], const prefix0.MyReflectable(), null),
        new r.MethodMirrorImpl(r"foo=", 65540, 2, null, -1, -1, const <int>[8],
            const prefix0.MyReflectable(), null),
        new r.MethodMirrorImpl(r"accessor", 65539, 2, null, -1, -1,
            const <int>[], const prefix0.MyReflectable(), null),
        new r.MethodMirrorImpl(r"accessor=", 65540, 2, null, -1, -1,
            const <int>[9], const prefix0.MyReflectable(), null),
        new r.MethodMirrorImpl(r"", 64, 2, -1, -1, -1, const <int>[],
            const prefix0.MyReflectable(), null)
      ],
      <m.ParameterMirror>[
        new r.ParameterMirrorImpl(r"x", 16390, 1, const prefix0.MyReflectable(),
            null, -1, -1, null, null, null),
        new r.ParameterMirrorImpl(r"_foo", 16486, 4,
            const prefix0.MyReflectable(), null, -1, -1, null, null, null),
        new r.ParameterMirrorImpl(r"x", 16390, 6, const prefix0.MyReflectable(),
            null, -1, -1, null, null, null),
        new r.ParameterMirrorImpl(r"other", 16390, 8,
            const prefix0.MyReflectable(), null, -1, -1, null, null, null),
        new r.ParameterMirrorImpl(r"invocation", 32774, 10,
            const prefix0.MyReflectable(), -1, -1, -1, null, null, null),
        new r.ParameterMirrorImpl(r"x", 16390, 13,
            const prefix0.MyReflectable(), null, -1, -1, null, null, null),
        new r.ParameterMirrorImpl(r"x", 16390, 17,
            const prefix0.MyReflectable(), null, -1, -1, null, null, null),
        new r.ParameterMirrorImpl(r"x", 16390, 19,
            const prefix0.MyReflectable(), null, -1, -1, null, null, null),
        new r.ParameterMirrorImpl(r"x", 16390, 21,
            const prefix0.MyReflectable(), null, -1, -1, null, null, null),
        new r.ParameterMirrorImpl(r"x", 16390, 23,
            const prefix0.MyReflectable(), null, -1, -1, null, null, null)
      ],
      <Type>[prefix0.A, prefix0.B, prefix0.C],
      3,
      {
        r"==": (dynamic instance) => (x) => instance == x,
        r"toString": (dynamic instance) => instance.toString,
        r"noSuchMethod": (dynamic instance) => instance.noSuchMethod,
        r"hashCode": (dynamic instance) => instance.hashCode,
        r"runtimeType": (dynamic instance) => instance.runtimeType,
        r"instanceMethod": (dynamic instance) => instance.instanceMethod,
        r"aMethod": (dynamic instance) => instance.aMethod,
        r"foo": (dynamic instance) => instance.foo,
        r"accessor": (dynamic instance) => instance.accessor,
        r"bMethod": (dynamic instance) => instance.bMethod,
        r"cMethod": (dynamic instance) => instance.cMethod
      },
      {
        r"foo=": (dynamic instance, value) => instance.foo = value,
        r"accessor=": (dynamic instance, value) => instance.accessor = value
      },
      null,
      [])
};

final _memberSymbolMap = null;

initializeReflectable() {
  if (!isTransformed) {
    throw new UnsupportedError(
        "The transformed code is running with the untransformed "
        "reflectable package. Remember to set your package-root to "
        "'build/.../packages'.");
  }
  r.data = _data;
  r.memberSymbolMap = _memberSymbolMap;
}
