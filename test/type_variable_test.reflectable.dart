// This file has been generated by the reflectable package.
// https://github.com/dart-lang/reflectable.

import "dart:core";
import 'type_variable_test.dart' as prefix0;

// ignore:unused_import
import "package:reflectable/mirrors.dart" as m;
// ignore:unused_import
import "package:reflectable/src/reflectable_transformer_based.dart" as r;
// ignore:unused_import
import "package:reflectable/reflectable.dart" show isTransformed;

final _data = {
  const prefix0.NoTypeVariablesReflector(): new r.ReflectorData(
      <m.TypeMirror>[
        new r.GenericClassMirrorImpl(
            r"B",
            r"test_reflectable.test.type_variable_test.B",
            7,
            0,
            const prefix0.NoTypeVariablesReflector(),
            const <int>[-1],
            null,
            null,
            -1,
            {},
            {},
            {},
            0,
            0,
            const <int>[],
            null,
            {}, (o) {
          return o is prefix0.B && o is! prefix0.C;
        }, null, 0),
        new r.TypeVariableMirrorImpl(
            r"X",
            r"test_reflectable.test.type_variable_test.B.X",
            const prefix0.NoTypeVariablesReflector(),
            -1,
            0,
            null),
        new r.TypeVariableMirrorImpl(
            r"Y",
            r"test_reflectable.test.type_variable_test.B.Y",
            const prefix0.NoTypeVariablesReflector(),
            -1,
            0,
            null)
      ],
      null,
      null,
      <Type>[prefix0.B],
      1,
      {},
      {},
      <m.LibraryMirror>[
        new r.LibraryMirrorImpl(
            r"test_reflectable.test.type_variable_test",
            Uri.parse(
                r"reflectable://0/test_reflectable.test.type_variable_test"),
            const prefix0.NoTypeVariablesReflector(),
            const <int>[-1],
            {},
            {},
            null,
            {})
      ],
      []),
  const prefix0.NoBoundsReflector(): new r.ReflectorData(
      <m.TypeMirror>[
        new r.GenericClassMirrorImpl(
            r"B",
            r"test_reflectable.test.type_variable_test.B",
            7,
            0,
            const prefix0.NoBoundsReflector(),
            const <int>[],
            const <int>[],
            const <int>[],
            -1,
            {},
            {},
            {},
            0,
            0,
            const <int>[],
            null,
            null, (o) {
          return o is prefix0.B && o is! prefix0.C;
        }, const <int>[1, 2], 0),
        new r.TypeVariableMirrorImpl(
            r"X",
            r"test_reflectable.test.type_variable_test.B.X",
            const prefix0.NoBoundsReflector(),
            -1,
            0,
            null),
        new r.TypeVariableMirrorImpl(
            r"Y",
            r"test_reflectable.test.type_variable_test.B.Y",
            const prefix0.NoBoundsReflector(),
            -1,
            0,
            null)
      ],
      <m.DeclarationMirror>[],
      <m.ParameterMirror>[],
      <Type>[prefix0.B],
      1,
      {},
      {},
      <m.LibraryMirror>[
        new r.LibraryMirrorImpl(
            r"test_reflectable.test.type_variable_test",
            Uri.parse(
                r"reflectable://0/test_reflectable.test.type_variable_test"),
            const prefix0.NoBoundsReflector(),
            const <int>[],
            {},
            {},
            null,
            null)
      ],
      []),
  const prefix0.Reflector(): new r.ReflectorData(
      <m.TypeMirror>[
        new r.GenericClassMirrorImpl(
            r"B",
            r"test_reflectable.test.type_variable_test.B",
            7,
            0,
            const prefix0.Reflector(),
            const <int>[],
            const <int>[],
            const <int>[],
            4,
            {},
            {},
            {},
            0,
            0,
            const <int>[],
            const <Object>[
              prefix0.noTypeVariablesReflector,
              prefix0.noBoundsReflector,
              prefix0.reflector
            ],
            null, (o) {
          return o is prefix0.B && o is! prefix0.C;
        }, const <int>[6, 7], 0),
        new r.GenericClassMirrorImpl(
            r"C",
            r"test_reflectable.test.type_variable_test.C",
            7,
            1,
            const prefix0.Reflector(),
            const <int>[],
            const <int>[],
            const <int>[],
            0,
            {},
            {},
            {},
            0,
            1,
            const <int>[5],
            const <Object>[prefix0.reflector],
            null, (o) {
          return o is prefix0.C && o is! prefix0.D && o is! prefix0.E;
        }, const <int>[8], 1),
        new r.GenericClassMirrorImpl(
            r"D",
            r"test_reflectable.test.type_variable_test.D",
            7,
            2,
            const prefix0.Reflector(),
            const <int>[],
            const <int>[],
            const <int>[],
            1,
            {},
            {},
            {},
            0,
            2,
            const <int>[],
            const <Object>[prefix0.reflector],
            null, (o) {
          return o is prefix0.D;
        }, const <int>[9], 2),
        new r.NonGenericClassMirrorImpl(
            r"E",
            r"test_reflectable.test.type_variable_test.E",
            7,
            3,
            const prefix0.Reflector(),
            const <int>[],
            const <int>[],
            const <int>[],
            1,
            {},
            {},
            {},
            0,
            3,
            const <int>[],
            const <Object>[prefix0.reflector],
            null),
        new r.NonGenericClassMirrorImpl(
            r"Object",
            r"dart.core.Object",
            7,
            4,
            const prefix0.Reflector(),
            const <int>[],
            const <int>[],
            const <int>[],
            null,
            {},
            {},
            {},
            1,
            4,
            const <int>[],
            const <Object>[],
            null),
        new r.NonGenericClassMirrorImpl(
            r"A",
            r"test_reflectable.test.type_variable_test.A",
            7,
            5,
            const prefix0.Reflector(),
            const <int>[],
            const <int>[],
            const <int>[],
            4,
            {},
            {},
            {},
            0,
            5,
            const <int>[],
            const <Object>[],
            null),
        new r.TypeVariableMirrorImpl(
            r"X",
            r"test_reflectable.test.type_variable_test.B.X",
            const prefix0.Reflector(),
            4,
            0, <Object>[]),
        new r.TypeVariableMirrorImpl(
            r"Y",
            r"test_reflectable.test.type_variable_test.B.Y",
            const prefix0.Reflector(),
            5,
            0, <Object>[]),
        new r.TypeVariableMirrorImpl(
            r"Z",
            r"test_reflectable.test.type_variable_test.C.Z",
            const prefix0.Reflector(),
            5,
            1, <Object>[]),
        new r.TypeVariableMirrorImpl(
            r"U",
            r"test_reflectable.test.type_variable_test.D.U",
            const prefix0.Reflector(),
            1,
            2, <Object>[])
      ],
      <m.DeclarationMirror>[],
      <m.ParameterMirror>[],
      <Type>[prefix0.B, prefix0.C, prefix0.D, prefix0.E, Object, prefix0.A],
      6,
      {},
      {},
      <m.LibraryMirror>[
        new r.LibraryMirrorImpl(
            r"test_reflectable.test.type_variable_test",
            Uri.parse(
                r"reflectable://0/test_reflectable.test.type_variable_test"),
            const prefix0.Reflector(),
            const <int>[],
            {},
            {},
            const <Object>[],
            null),
        new r.LibraryMirrorImpl(
            r"dart.core",
            Uri.parse(r"reflectable://1/dart.core"),
            const prefix0.Reflector(),
            const <int>[],
            {},
            {},
            const <Object>[],
            null)
      ],
      [])
};

final _memberSymbolMap = null;

initializeReflectable() {
  if (!isTransformed) {
    throw new UnsupportedError(
        "The transformed code is running with the untransformed "
        "reflectable package. Remember to set your package-root to "
        "'build/.../packages'.");
  }
  r.data = _data;
  r.memberSymbolMap = _memberSymbolMap;
}
