// This file has been generated by the reflectable package.
// https://github.com/dart-lang/reflectable.

import "dart:core";
import 'invoke_capabilities_test.dart' as prefix0;

// ignore:unused_import
import "package:reflectable/mirrors.dart" as m;
// ignore:unused_import
import "package:reflectable/src/reflectable_transformer_based.dart" as r;
// ignore:unused_import
import "package:reflectable/reflectable.dart" show isTransformed;

final _data = {
  const prefix0.InvokingReflector(): new r.ReflectorData(
      <m.TypeMirror>[
        new r.NonGenericClassMirrorImpl(
            r"A",
            r"test_reflectable.test.invoke_capabilities_test.A",
            7,
            0,
            const prefix0.InvokingReflector(),
            const <int>[-1],
            null,
            null,
            -1,
            {},
            {},
            {r"": (b) => () => b ? new prefix0.A() : null},
            -1,
            -1,
            const <int>[-1],
            null,
            {
              r"==": 1,
              r"toString": 0,
              r"noSuchMethod": 1,
              r"hashCode": 0,
              r"runtimeType": 0,
              r"foo": 0,
              r"foobar": 0,
              r"reset": 0,
              r"field": 0,
              r"field=": 1,
              r"getFoo": 0,
              r"getFoobar": 0,
              r"setFoo=": 1,
              r"setFoobar=": 1
            }),
        new r.NonGenericClassMirrorImpl(
            r"B",
            r"test_reflectable.test.invoke_capabilities_test.B",
            7,
            1,
            const prefix0.InvokingReflector(),
            const <int>[-1],
            null,
            null,
            -1,
            {
              r"foo": () => prefix0.B.foo,
              r"foobar": () => prefix0.B.foobar,
              r"reset": () => prefix0.B.reset,
              r"field": () => prefix0.B.field,
              r"getFoo": () => prefix0.B.getFoo,
              r"getFoobar": () => prefix0.B.getFoobar
            },
            {
              r"field=": (value) => prefix0.B.field = value,
              r"setFoo=": (value) => prefix0.B.setFoo = value,
              r"setFoobar=": (value) => prefix0.B.setFoobar = value
            },
            {r"": (b) => () => b ? new prefix0.B() : null},
            -1,
            -1,
            const <int>[-1],
            null,
            {
              r"==": 1,
              r"toString": 0,
              r"noSuchMethod": 1,
              r"hashCode": 0,
              r"runtimeType": 0,
              r"foo": 0,
              r"foobar": 0,
              r"reset": 0,
              r"field": 0,
              r"field=": 1,
              r"getFoo": 0,
              r"getFoobar": 0,
              r"setFoo=": 1,
              r"setFoobar=": 1
            })
      ],
      null,
      null,
      <Type>[prefix0.A, prefix0.B],
      2,
      {
        r"==": (dynamic instance) => (x) => instance == x,
        r"toString": (dynamic instance) => instance.toString,
        r"noSuchMethod": (dynamic instance) => instance.noSuchMethod,
        r"hashCode": (dynamic instance) => instance.hashCode,
        r"runtimeType": (dynamic instance) => instance.runtimeType,
        r"foo": (dynamic instance) => instance.foo,
        r"foobar": (dynamic instance) => instance.foobar,
        r"reset": (dynamic instance) => instance.reset,
        r"field": (dynamic instance) => instance.field,
        r"getFoo": (dynamic instance) => instance.getFoo,
        r"getFoobar": (dynamic instance) => instance.getFoobar
      },
      {
        r"field=": (dynamic instance, value) => instance.field = value,
        r"setFoo=": (dynamic instance, value) => instance.setFoo = value,
        r"setFoobar=": (dynamic instance, value) => instance.setFoobar = value
      },
      null,
      [
        const [0, 0, null],
        const [1, 0, null]
      ]),
  const prefix0.InstanceInvokeReflector(): new r.ReflectorData(
      <m.TypeMirror>[
        new r.NonGenericClassMirrorImpl(
            r"A",
            r"test_reflectable.test.invoke_capabilities_test.A",
            7,
            0,
            const prefix0.InstanceInvokeReflector(),
            const <int>[-1],
            null,
            null,
            -1,
            {},
            {},
            {},
            -1,
            -1,
            const <int>[-1],
            null,
            {
              r"==": 1,
              r"toString": 0,
              r"noSuchMethod": 1,
              r"hashCode": 0,
              r"runtimeType": 0,
              r"foo": 0,
              r"foobar": 0,
              r"reset": 0,
              r"field": 0,
              r"field=": 1,
              r"getFoo": 0,
              r"getFoobar": 0,
              r"setFoo=": 1,
              r"setFoobar=": 1
            })
      ],
      null,
      null,
      <Type>[prefix0.A],
      1,
      {
        r"==": (dynamic instance) => (x) => instance == x,
        r"toString": (dynamic instance) => instance.toString,
        r"noSuchMethod": (dynamic instance) => instance.noSuchMethod,
        r"hashCode": (dynamic instance) => instance.hashCode,
        r"runtimeType": (dynamic instance) => instance.runtimeType,
        r"foo": (dynamic instance) => instance.foo,
        r"foobar": (dynamic instance) => instance.foobar,
        r"reset": (dynamic instance) => instance.reset,
        r"field": (dynamic instance) => instance.field,
        r"getFoo": (dynamic instance) => instance.getFoo,
        r"getFoobar": (dynamic instance) => instance.getFoobar
      },
      {
        r"field=": (dynamic instance, value) => instance.field = value,
        r"setFoo=": (dynamic instance, value) => instance.setFoo = value,
        r"setFoobar=": (dynamic instance, value) => instance.setFoobar = value
      },
      null,
      [
        const [0, 0, null],
        const [1, 0, null]
      ]),
  const prefix0.InvokingFrReflector(): new r.ReflectorData(
      <m.TypeMirror>[
        new r.NonGenericClassMirrorImpl(
            r"A",
            r"test_reflectable.test.invoke_capabilities_test.A",
            7,
            0,
            const prefix0.InvokingFrReflector(),
            const <int>[-1],
            null,
            null,
            -1,
            {},
            {},
            {},
            -1,
            -1,
            const <int>[-1],
            null,
            {r"foobar": 0, r"getFoobar": 0, r"setFoobar=": 1}),
        new r.NonGenericClassMirrorImpl(
            r"B",
            r"test_reflectable.test.invoke_capabilities_test.B",
            7,
            1,
            const prefix0.InvokingFrReflector(),
            const <int>[-1],
            null,
            null,
            -1,
            {
              r"foobar": () => prefix0.B.foobar,
              r"getFoobar": () => prefix0.B.getFoobar
            },
            {r"setFoobar=": (value) => prefix0.B.setFoobar = value},
            {},
            -1,
            -1,
            const <int>[-1],
            null,
            {r"foobar": 0, r"getFoobar": 0, r"setFoobar=": 1})
      ],
      null,
      null,
      <Type>[prefix0.A, prefix0.B],
      2,
      {
        r"foobar": (dynamic instance) => instance.foobar,
        r"getFoobar": (dynamic instance) => instance.getFoobar
      },
      {r"setFoobar=": (dynamic instance, value) => instance.setFoobar = value},
      null,
      [
        const [0, 0, null],
        const [1, 0, null]
      ]),
  const prefix0.InstanceInvokeFrReflector(): new r.ReflectorData(
      <m.TypeMirror>[
        new r.NonGenericClassMirrorImpl(
            r"A",
            r"test_reflectable.test.invoke_capabilities_test.A",
            7,
            0,
            const prefix0.InstanceInvokeFrReflector(),
            const <int>[-1],
            null,
            null,
            -1,
            {},
            {},
            {},
            -1,
            -1,
            const <int>[-1],
            null,
            {r"foobar": 0, r"getFoobar": 0, r"setFoobar=": 1})
      ],
      null,
      null,
      <Type>[prefix0.A],
      1,
      {
        r"foobar": (dynamic instance) => instance.foobar,
        r"getFoobar": (dynamic instance) => instance.getFoobar
      },
      {r"setFoobar=": (dynamic instance, value) => instance.setFoobar = value},
      null,
      [
        const [0, 0, null],
        const [1, 0, null]
      ]),
  const prefix0.StaticInvokeReflector(): new r.ReflectorData(
      <m.TypeMirror>[
        new r.NonGenericClassMirrorImpl(
            r"B",
            r"test_reflectable.test.invoke_capabilities_test.B",
            7,
            0,
            const prefix0.StaticInvokeReflector(),
            const <int>[-1],
            null,
            null,
            -1,
            {
              r"foo": () => prefix0.B.foo,
              r"foobar": () => prefix0.B.foobar,
              r"reset": () => prefix0.B.reset,
              r"field": () => prefix0.B.field,
              r"getFoo": () => prefix0.B.getFoo,
              r"getFoobar": () => prefix0.B.getFoobar
            },
            {
              r"field=": (value) => prefix0.B.field = value,
              r"setFoo=": (value) => prefix0.B.setFoo = value,
              r"setFoobar=": (value) => prefix0.B.setFoobar = value
            },
            {},
            -1,
            -1,
            const <int>[-1],
            null,
            {
              r"foo": 0,
              r"foobar": 0,
              r"reset": 0,
              r"field": 0,
              r"field=": 1,
              r"getFoo": 0,
              r"getFoobar": 0,
              r"setFoo=": 1,
              r"setFoobar=": 1
            })
      ],
      null,
      null,
      <Type>[prefix0.B],
      1,
      {},
      {},
      null,
      [
        const [0, 0, null],
        const [1, 0, null]
      ]),
  const prefix0.StaticInvokeFrReflector(): new r.ReflectorData(
      <m.TypeMirror>[
        new r.NonGenericClassMirrorImpl(
            r"B",
            r"test_reflectable.test.invoke_capabilities_test.B",
            7,
            0,
            const prefix0.StaticInvokeFrReflector(),
            const <int>[-1],
            null,
            null,
            -1,
            {
              r"foobar": () => prefix0.B.foobar,
              r"getFoobar": () => prefix0.B.getFoobar
            },
            {r"setFoobar=": (value) => prefix0.B.setFoobar = value},
            {},
            -1,
            -1,
            const <int>[-1],
            null,
            {r"foobar": 0, r"getFoobar": 0, r"setFoobar=": 1})
      ],
      null,
      null,
      <Type>[prefix0.B],
      1,
      {},
      {},
      null,
      [
        const [0, 0, null],
        const [1, 0, null]
      ])
};

final _memberSymbolMap = null;

initializeReflectable() {
  if (!isTransformed) {
    throw new UnsupportedError(
        "The transformed code is running with the untransformed "
        "reflectable package. Remember to set your package-root to "
        "'build/.../packages'.");
  }
  r.data = _data;
  r.memberSymbolMap = _memberSymbolMap;
}
