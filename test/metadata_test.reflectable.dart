// This file has been generated by the reflectable package.
// https://github.com/dart-lang/reflectable.

import "dart:core";
import 'metadata_test.dart' as prefix0;

// ignore:unused_import
import "package:reflectable/mirrors.dart" as m;
// ignore:unused_import
import "package:reflectable/src/reflectable_transformer_based.dart" as r;
// ignore:unused_import
import "package:reflectable/reflectable.dart" show isTransformed;

final _data = {
  const prefix0.MyReflectable(): new r.ReflectorData(
      <m.TypeMirror>[
        new r.NonGenericClassMirrorImpl(
            r"Foo",
            r"test_reflectable.test.metadata_test.Foo",
            7,
            0,
            const prefix0.MyReflectable(),
            const <int>[0, 1],
            const <int>[4, 5, 6, 7, 8, 1, 2, 3],
            const <int>[],
            -1,
            {},
            {},
            {},
            0,
            -1,
            const <int>[-1],
            const <Object>[
              prefix0.myReflectable,
              const prefix0.Bar(const {
                prefix0.b: deprecated,
                prefix0.c: const Deprecated("tomorrow"),
                1 + 2: (prefix0.d ? 3 : 4),
                identical(1, 2): "s",
                prefix0.K.p: 6
              }),
              prefix0.b,
              prefix0.c
            ],
            null)
      ],
      <m.DeclarationMirror>[
        new r.VariableMirrorImpl(r"x", 16389, 0, const prefix0.MyReflectable(),
            null, -1, -1, const <Object>[prefix0.b]),
        new r.MethodMirrorImpl(
            r"foo",
            65538,
            0,
            null,
            -1,
            -1,
            const <int>[],
            const prefix0.MyReflectable(),
            const <Object>[
              const prefix0.Bar(const {}),
              const prefix0.Bar.namedConstructor(const {}),
              prefix0.b,
              prefix0.c
            ]),
        new r.ImplicitGetterMirrorImpl(
            const prefix0.MyReflectable(), 0, -1, -1, 2),
        new r.ImplicitSetterMirrorImpl(
            const prefix0.MyReflectable(), 0, -1, -1, 3),
        new r.MethodMirrorImpl(r"==", 131074, null, -1, -1, -1, const <int>[1],
            const prefix0.MyReflectable(), const <Object>[]),
        new r.MethodMirrorImpl(r"toString", 131074, null, -1, -1, -1,
            const <int>[], const prefix0.MyReflectable(), const <Object>[]),
        new r.MethodMirrorImpl(r"noSuchMethod", 65538, null, null, -1, -1,
            const <int>[2], const prefix0.MyReflectable(), const <Object>[]),
        new r.MethodMirrorImpl(r"hashCode", 131075, null, -1, -1, -1,
            const <int>[], const prefix0.MyReflectable(), const <Object>[]),
        new r.MethodMirrorImpl(r"runtimeType", 131075, null, -1, -1, -1,
            const <int>[], const prefix0.MyReflectable(), const <Object>[])
      ],
      <m.ParameterMirror>[
        new r.ParameterMirrorImpl(r"_x", 16486, 3,
            const prefix0.MyReflectable(), null, -1, -1, const [], null, null),
        new r.ParameterMirrorImpl(
            r"other",
            16390,
            4,
            const prefix0.MyReflectable(),
            null,
            -1,
            -1,
            const <Object>[],
            null,
            null),
        new r.ParameterMirrorImpl(
            r"invocation",
            32774,
            6,
            const prefix0.MyReflectable(),
            -1,
            -1,
            -1,
            const <Object>[],
            null,
            null)
      ],
      <Type>[prefix0.Foo],
      1,
      {
        r"==": (dynamic instance) => (x) => instance == x,
        r"toString": (dynamic instance) => instance.toString,
        r"noSuchMethod": (dynamic instance) => instance.noSuchMethod,
        r"hashCode": (dynamic instance) => instance.hashCode,
        r"runtimeType": (dynamic instance) => instance.runtimeType,
        r"foo": (dynamic instance) => instance.foo,
        r"x": (dynamic instance) => instance.x
      },
      {r"x=": (dynamic instance, value) => instance.x = value},
      <m.LibraryMirror>[
        new r.LibraryMirrorImpl(
            r"test_reflectable.test.metadata_test",
            Uri.parse(r"reflectable://0/test_reflectable.test.metadata_test"),
            const prefix0.MyReflectable(),
            const <int>[],
            {},
            {},
            const <Object>[prefix0.c],
            null)
      ],
      []),
  const prefix0.MyReflectable2(): new r.ReflectorData(
      <m.TypeMirror>[
        new r.NonGenericClassMirrorImpl(
            r"Foo2",
            r"test_reflectable.test.metadata_test.Foo2",
            7,
            0,
            const prefix0.MyReflectable2(),
            const <int>[-1],
            null,
            null,
            -1,
            {},
            {},
            {},
            -1,
            -1,
            const <int>[-1],
            null,
            {
              r"==": 1,
              r"toString": 0,
              r"noSuchMethod": 1,
              r"hashCode": 0,
              r"runtimeType": 0,
              r"foo": 0
            })
      ],
      null,
      null,
      <Type>[prefix0.Foo2],
      1,
      {
        r"==": (dynamic instance) => (x) => instance == x,
        r"toString": (dynamic instance) => instance.toString,
        r"noSuchMethod": (dynamic instance) => instance.noSuchMethod,
        r"hashCode": (dynamic instance) => instance.hashCode,
        r"runtimeType": (dynamic instance) => instance.runtimeType,
        r"foo": (dynamic instance) => instance.foo
      },
      {},
      null,
      [
        const [0, 0, null],
        const [1, 0, null]
      ])
};

final _memberSymbolMap = null;

initializeReflectable() {
  if (!isTransformed) {
    throw new UnsupportedError(
        "The transformed code is running with the untransformed "
        "reflectable package. Remember to set your package-root to "
        "'build/.../packages'.");
  }
  r.data = _data;
  r.memberSymbolMap = _memberSymbolMap;
}
