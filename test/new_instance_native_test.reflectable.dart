// This file has been generated by the reflectable package.
// https://github.com/dart-lang/reflectable.

import "dart:core";
import 'new_instance_native_test.dart' as prefix0;

// ignore:unused_import
import "package:reflectable/mirrors.dart" as m;
// ignore:unused_import
import "package:reflectable/src/reflectable_transformer_based.dart" as r;
// ignore:unused_import
import "package:reflectable/reflectable.dart" show isTransformed;

final _data = {
  const prefix0.Reflector(): new r.ReflectorData(
      <m.TypeMirror>[
        new r.GenericClassMirrorImpl(
            r"List",
            r"dart.core.List",
            519,
            0,
            const prefix0.Reflector(),
            const <int>[0, 1, 2, 3, 4],
            const <int>[],
            const <int>[],
            -1,
            {},
            {},
            {
              r"": (b) => ([length]) =>
                  b ? (length == null ? new List() : new List(length)) : null,
              r"filled": (b) => (length, fill, {growable: false}) =>
                  b ? new List.filled(length, fill, growable: growable) : null,
              r"from": (b) => (elements, {growable: true}) =>
                  b ? new List.from(elements, growable: growable) : null,
              r"generate": (b) => (length, generator, {growable: true}) => b
                  ? new List.generate(length, generator, growable: growable)
                  : null,
              r"unmodifiable": (b) =>
                  (elements) => b ? new List.unmodifiable(elements) : null
            },
            0,
            -1,
            const <int>[-1],
            null,
            null,
            (o) => false,
            const <int>[1],
            0),
        new r.TypeVariableMirrorImpl(
            r"E", r"dart.core.List.E", const prefix0.Reflector(), -1, 0, null)
      ],
      <m.DeclarationMirror>[
        new r.MethodMirrorImpl(r"", 1, 0, -1, -1, -1, const <int>[0],
            const prefix0.Reflector(), null),
        new r.MethodMirrorImpl(r"filled", 1, 0, -1, -1, -1,
            const <int>[1, 2, 3], const prefix0.Reflector(), null),
        new r.MethodMirrorImpl(r"from", 1, 0, -1, -1, -1, const <int>[4, 5],
            const prefix0.Reflector(), null),
        new r.MethodMirrorImpl(r"generate", 1, 0, -1, -1, -1,
            const <int>[6, 7, 8], const prefix0.Reflector(), null),
        new r.MethodMirrorImpl(r"unmodifiable", 1, 0, -1, -1, -1,
            const <int>[9], const prefix0.Reflector(), null)
      ],
      <m.ParameterMirror>[
        new r.ParameterMirrorImpl(r"length", 36870, 0,
            const prefix0.Reflector(), -1, -1, -1, null, null, null),
        new r.ParameterMirrorImpl(r"length", 32774, 1,
            const prefix0.Reflector(), -1, -1, -1, null, null, null),
        new r.ParameterMirrorImpl(r"fill", 6, 1, const prefix0.Reflector(),
            null, -1, -1, null, null, null),
        new r.ParameterMirrorImpl(r"growable", 47110, 1,
            const prefix0.Reflector(), -1, -1, -1, null, false, #growable),
        new r.ParameterMirrorImpl(r"elements", 2129926, 2,
            const prefix0.Reflector(), -1, -1, -1, null, null, null),
        new r.ParameterMirrorImpl(r"growable", 47110, 2,
            const prefix0.Reflector(), -1, -1, -1, null, true, #growable),
        new r.ParameterMirrorImpl(r"length", 32774, 3,
            const prefix0.Reflector(), -1, -1, -1, null, null, null),
        new r.ParameterMirrorImpl(r"generator", 6, 3, const prefix0.Reflector(),
            null, -1, -1, null, null, null),
        new r.ParameterMirrorImpl(r"growable", 47110, 3,
            const prefix0.Reflector(), -1, -1, -1, null, true, #growable),
        new r.ParameterMirrorImpl(r"elements", 2129926, 4,
            const prefix0.Reflector(), -1, -1, -1, null, null, null)
      ],
      <Type>[List],
      1,
      {},
      {},
      <m.LibraryMirror>[
        new r.LibraryMirrorImpl(
            r"dart.core",
            Uri.parse(r"reflectable://0/dart.core"),
            const prefix0.Reflector(),
            const <int>[],
            {},
            {},
            null,
            null)
      ],
      [])
};

final _memberSymbolMap = null;

initializeReflectable() {
  if (!isTransformed) {
    throw new UnsupportedError(
        "The transformed code is running with the untransformed "
        "reflectable package. Remember to set your package-root to "
        "'build/.../packages'.");
  }
  r.data = _data;
  r.memberSymbolMap = _memberSymbolMap;
}
