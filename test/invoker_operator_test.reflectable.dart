// This file has been generated by the reflectable package.
// https://github.com/dart-lang/reflectable.

import "dart:core";
import 'invoker_operator_test.dart' as prefix0;

// ignore:unused_import
import "package:reflectable/mirrors.dart" as m;
// ignore:unused_import
import "package:reflectable/src/reflectable_transformer_based.dart" as r;
// ignore:unused_import
import "package:reflectable/reflectable.dart" show isTransformed;

final _data = {
  const prefix0.MyReflectable(): new r.ReflectorData(
      <m.TypeMirror>[
        new r.NonGenericClassMirrorImpl(
            r"A",
            r"test_reflectable.test.invoker_operator_test.A",
            7,
            0,
            const prefix0.MyReflectable(),
            const <int>[-1],
            null,
            null,
            -1,
            {},
            {},
            {r"": (b) => (f) => b ? new prefix0.A(f) : null},
            -1,
            -1,
            const <int>[-1],
            null,
            {
              r"==": 0,
              r"toString": 2,
              r"noSuchMethod": 0,
              r"hashCode": 2,
              r"runtimeType": 2,
              r"+": 0,
              r"[]": 0,
              r"[]=": 1,
              r"f": 2,
              r"f=": 0
            })
      ],
      null,
      null,
      <Type>[prefix0.A],
      1,
      {
        r"==": (dynamic instance) => (x) => instance == x,
        r"toString": (dynamic instance) => instance.toString,
        r"noSuchMethod": (dynamic instance) => instance.noSuchMethod,
        r"hashCode": (dynamic instance) => instance.hashCode,
        r"runtimeType": (dynamic instance) => instance.runtimeType,
        r"+": (dynamic instance) => (x) => instance + x,
        r"[]": (dynamic instance) => (x) => instance[x],
        r"[]=": (dynamic instance) => (x, v) => instance[x] = v,
        r"f": (dynamic instance) => instance.f
      },
      {r"f=": (dynamic instance, value) => instance.f = value},
      null,
      [
        const [1, 0, null],
        const [2, 0, null],
        const [0, 0, null]
      ])
};

final _memberSymbolMap = null;

initializeReflectable() {
  if (!isTransformed) {
    throw new UnsupportedError(
        "The transformed code is running with the untransformed "
        "reflectable package. Remember to set your package-root to "
        "'build/.../packages'.");
  }
  r.data = _data;
  r.memberSymbolMap = _memberSymbolMap;
}
